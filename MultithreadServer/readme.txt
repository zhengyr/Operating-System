Your project is to implement a simulation of customers issuing requests to use shared resources using Java Threads. There are rules that constrain when different customers may make use of resources. Your program is responsible for enforcing these rules using Java synchronization.The project is split into two tasks. In task 1, you will have multiple concurrent client threads representing consumers that will try to access a shared resource.To enforce the restrictions on which and how many consumers can use the resourceyour simulation program will need to use Java synchronized methods and busy waiting.In task 2, you will improve the simulation program by using Java monitors to avoid busy waiting. In this task you will have a centralized scheduler that coordinates consumer access to multiple instances of the shared resources. Your scheduler will build on the synchronized code you developed in task 1, and add monitor synchronization to avoid busy waiting. The scheduler will also need to enforce FIFO (First­In First­Out) ordering.